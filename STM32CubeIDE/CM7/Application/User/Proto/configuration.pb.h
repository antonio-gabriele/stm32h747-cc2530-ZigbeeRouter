/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_MY_CONFIGURATION_PB_H_INCLUDED
#define PB_MY_CONFIGURATION_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _my_Configuration { 
    uint32_t devType; 
    pb_callback_t Devices; 
} my_Configuration;

typedef struct _my_Device { 
    uint32_t NetworkAddress; 
} my_Device;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define my_Device_init_default                   {0}
#define my_Configuration_init_default            {0, {{NULL}, NULL}}
#define my_Device_init_zero                      {0}
#define my_Configuration_init_zero               {0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define my_Configuration_devType_tag             1
#define my_Configuration_Devices_tag             2
#define my_Device_NetworkAddress_tag             1

/* Struct field encoding specification for nanopb */
#define my_Device_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   NetworkAddress,    1)
#define my_Device_CALLBACK NULL
#define my_Device_DEFAULT NULL

#define my_Configuration_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   devType,           1) \
X(a, CALLBACK, REPEATED, MESSAGE,  Devices,           2)
#define my_Configuration_CALLBACK pb_default_field_callback
#define my_Configuration_DEFAULT NULL
#define my_Configuration_Devices_MSGTYPE my_Device

extern const pb_msgdesc_t my_Device_msg;
extern const pb_msgdesc_t my_Configuration_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define my_Device_fields &my_Device_msg
#define my_Configuration_fields &my_Configuration_msg

/* Maximum encoded size of messages (where known) */
/* my_Configuration_size depends on runtime parameters */
#define my_Device_size                           6

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
